/**
 * Image URL mapping utility for Cancer Survivor Park plaque images
 * Converts single image URLs to multiple size URLs for optimal loading performance
 */

/**
 * Mapping of original image filenames to multiple size URLs
 * This should be updated when new images are processed
 */
const IMAGE_URL_MAPPING = {
  // This will be populated from the mapping file generated by the image resizer
  // For now, we'll use a pattern-based approach
};

/**
 * Extract filename from a Google Cloud Storage URL
 * @param {string} url - The original image URL
 * @returns {string|null} The filename or null if not extractable
 */
function extractFilenameFromUrl(url) {
  if (!url) return null;
  
  try {
    // Handle Google Cloud Storage URLs
    if (url.includes('storage.googleapis.com') || url.includes('googleusercontent.com')) {
      const urlParts = url.split('/');
      const filename = urlParts[urlParts.length - 1];
      // Handle query parameters
      return filename.split('?')[0];
    }
    
    // Fallback for other URL formats
    const urlParts = url.split('/');
    return urlParts[urlParts.length - 1].split('?')[0];
  } catch (error) {
    console.warn('Failed to extract filename from URL:', url, error);
    return null;
  }
}

/**
 * Generate multiple size URLs based on the original image URL
 * @param {string} originalUrl - The original image URL
 * @returns {Object} Object containing URLs for different sizes
 */
function generateMultipleSizeUrls(originalUrl) {
  if (!originalUrl) {
    return {
      small: null,
      medium: null,
      large: null
    };
  }

  const filename = extractFilenameFromUrl(originalUrl);
  if (!filename) {
    // If we can't extract filename, return original URL for all sizes
    return {
      small: originalUrl,
      medium: originalUrl,
      large: originalUrl
    };
  }

  // Check if we have specific mapping for this image
  if (IMAGE_URL_MAPPING[filename]) {
    return IMAGE_URL_MAPPING[filename];
  }

  // Generate URLs based on the pattern used by our image resizer
  const baseUrl = 'https://storage.googleapis.com/csp-bucket/images/';
  const baseFilename = filename.replace(/\.(jpeg|jpg|png)$/i, '');
  
  return {
    small: `${baseUrl}small/${baseFilename}_small.jpg`,
    medium: `${baseUrl}medium/${baseFilename}_medium.jpg`,
    large: `${baseUrl}large/${baseFilename}_large.jpg`
  };
}

/**
 * Enhance a plaque object with multiple image URLs
 * @param {Object} plaque - The plaque object from the database
 * @returns {Object} Enhanced plaque object with multiple image URLs
 */
function enhancePlaqueWithMultipleImageUrls(plaque) {
  if (!plaque || !plaque.photo) {
    return plaque;
  }

  const originalUrl = plaque.photo.url;
  const multipleUrls = generateMultipleSizeUrls(originalUrl);
  
  // Enhance the photo object with multiple URLs while maintaining backward compatibility
  return {
    ...plaque,
    photo: {
      ...plaque.photo,
      url: multipleUrls.medium || originalUrl, // Default to medium size, fallback to original
      urls: multipleUrls
    }
  };
}

/**
 * Enhance an array of plaques with multiple image URLs
 * @param {Array} plaques - Array of plaque objects
 * @returns {Array} Array of enhanced plaque objects
 */
function enhancePlaquesWithMultipleImageUrls(plaques) {
  if (!Array.isArray(plaques)) {
    return plaques;
  }

  return plaques.map(enhancePlaqueWithMultipleImageUrls);
}

/**
 * Load image URL mapping from the generated mapping file
 * This should be called when the server starts
 */
function loadImageUrlMapping() {
  try {
    // In a real implementation, this would load from a file or database
    // For now, we'll use the pattern-based approach
    console.log('Image URL mapping initialized with pattern-based URLs');
  } catch (error) {
    console.warn('Failed to load image URL mapping, using pattern-based URLs:', error);
  }
}

module.exports = {
  enhancePlaqueWithMultipleImageUrls,
  enhancePlaquesWithMultipleImageUrls,
  generateMultipleSizeUrls,
  loadImageUrlMapping,
  extractFilenameFromUrl
};